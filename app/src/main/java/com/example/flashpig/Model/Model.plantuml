@startuml

title __MODEL's Class Diagram__\n

  namespace com.example.flashpig {
    namespace Model {
      class com.example.flashpig.Model.Card {
          ~ backImg : Bitmap
          ~ backsideStr : String
          ~ difficulty : Enum
          ~ frontImg : Bitmap
          ~ frontsideStr : String
          ~ id : int
          ~ isFrontside : boolean
          ~ rand : Random
          + Card()
          + Card()
          + getBackImg()
          + getBacksideStr()
          + getDifficulty()
          + getFrontImg()
          + getFrontsideStr()
          + getId()
          + isFrontside()
          + setBackImg()
          + setBacksideStr()
          + setDifficulty()
          + setFrontImg()
          + setFrontside()
          + setFrontsideStr()
          + setId()
      }
    }
  }
  

  namespace com.example.flashpig {
    namespace Model {
      class com.example.flashpig.Model.Deck {
          + cards : List<Card>
          + isFrontside : boolean
          ~ amountcards : int
          ~ deckId : int
          ~ deckName : String
          ~ deckNotEmpty : boolean
          ~ rand : Random
          + Deck()
          + Deck()
          + addCard()
          + clearDeck()
          + deckContainsCard()
          + deleteCard()
          + getAmountCards()
          + getAmountDifficultyCards()
          + getCards()
          + getDeckName()
          + getId()
          + setDeckName()
          + setFrontside()
          + setIsFrontside()
      }
    }
  }
  

  namespace com.example.flashpig {
    namespace Model {
      enum Difficulty {
        EASY
        HARD
        MEDIUM
        NOTHING
      }
    }
  }
  

  namespace com.example.flashpig {
    namespace Model {
      class com.example.flashpig.Model.Flashcard {
          + gameDeck : List<Card>
          - easyAmount : int
          - hardAmount : int
          - mediumAmount : int
          + Flashcard()
          + addCardToMain()
          + addEasyCard()
          + addHardCard()
          + addMediumCard()
          + getCurrentCard()
          + getDeck()
          + getEasyAmount()
          + getHardAmount()
          + getMediumAmount()
          + roundIsOver()
          - updateDifficultyAmount()
      }
    }
  }
  

  namespace com.example.flashpig {
    namespace Model {
      class com.example.flashpig.Model.FlashcardProgress {
          - easyList : List<Card>
          - hardList : List<Card>
          - mediumList : List<Card>
          - nothingList : List<Card>
          + FlashcardProgress()
          + moveCard()
          + resetCard()
          + showCards()
          - sortList()
      }
    }
  }
  

  namespace com.example.flashpig {
    namespace Model {
      abstract class com.example.flashpig.Model.GameLogic {
          + GameLogic()
          + gameWon()
      }
    }
  }
  

  namespace com.example.flashpig {
    namespace Model {
      class com.example.flashpig.Model.Memory {
          + Memory()
          + flipCard()
          + isEndOfGame()
          + isMatched()
      }
    }
  }
  

  namespace com.example.flashpig {
    namespace Model {
      interface com.example.flashpig.Model.MemoryPairUpLogic {
          {abstract} + isEndOfGame()
          {abstract} + isMatched()
      }
    }
  }
  

  namespace com.example.flashpig {
    namespace Model {
      class com.example.flashpig.Model.PairUp {
          + PairUp()
          + isEndOfGame()
          + isMatched()
      }
    }
  }
  

  com.example.flashpig.Model.Flashcard -up-|> com.example.flashpig.Model.GameLogic
  com.example.flashpig.Model.Flashcard o-- com.example.flashpig.Model.Deck : deck
  com.example.flashpig.Model.FlashcardProgress o-- com.example.flashpig.Model.Deck : deck
  com.example.flashpig.Model.GameLogic o-- com.example.flashpig.Model.Deck : deck
  com.example.flashpig.Model.Memory .up.|> com.example.flashpig.Model.MemoryPairUpLogic
  com.example.flashpig.Model.Memory -up-|> com.example.flashpig.Model.GameLogic
  com.example.flashpig.Model.PairUp -up-|> com.example.flashpig.Model.GameLogic


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
